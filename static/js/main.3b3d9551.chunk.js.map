{"version":3,"sources":["config/StyleConstants.ts","components/entities/monsters/monster.components.tsx","components/functions/search-box.component.tsx","components/entities/monster.container.tsx","components/shared/layout/header/header.tsx","components/shared/layout/style/StyleConstants.ts","components/shared/layout/grid/grid.components.tsx","components/shared/layout/footer/footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BLUE_LIST","DARK_GREEN_LIST","LIGHT_GREEN_LIST","alive","dead","MonsterStatus","props","className","address","geo","lat","lng","MonsterName","name","MonsterImage","src","id","alt","Monster","style","height","MonsterWrapper","monsters","map","monster","i","key","SearchBox","type","placeholder","onChange","handleChange","MonsterContainer","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","event","target","value","Component","Header","title","ColumnSection","nameClass","children","ColumnElement","listClass","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b3d9551.chunk.js","sourcesContent":["/* LAYOUT */\nexport const APP_CONTAINER = \"m-auto antialiased font-sans font-serif font-mono text-center\";\nexport const HEADER_CONTAINER = \"bg-blue-500 w-full flex flex-col sticky top-0 pt-12\";\nexport const HEADER_TEXT=\"text-center text-orange-500 font-bold\";\n\n/* INPUT */\nexport const BODY_CONTENT =\"bg-orange-500 min-h-screen flex flex-col items-center justify-center text-white text-2xl\";\nexport const SEARCH_INPUT = \"text-gray-500 rounded m-4 py-4 px-6 hover:shadow hover:bg-blue-600\";\n\n/* CARD LAYOUT */\nexport const CARD = \"max-w-sm rounded overflow-hidden shadow-lg bg-white hover:opacity-50\";\nexport const CELL = \"w-1/5 py-1 m-2\";\nexport const CARD_BODY = \"px-6 py-4\";\n\n/* LIST ELEMENT */\nexport const ORANGE_LIST = \"hover:text-orange-500 text-gray-500\";\nexport const BLUE_LIST = \"hover:text-blue-500 text-gray-500\";\nexport const DARK_GREEN_LIST = \"hover:text-green-900 text-gray-500\";\nexport const LIGHT_GREEN_LIST = \"hover:text-green-300 text-gray-500\";","import React from \"react\";\nimport {IMonster} from \"./monster.model\";\nimport {CARD, CARD_BODY, CELL} from \"../../../config/StyleConstants\";\n\nconst alive = \"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\";\nconst dead = \"inline-block bg-red-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\";\n\ninterface IMonsterWrapper {\n    monsters: IMonster[]\n}\n\nconst MonsterStatus = (props: any) =>\n    <div className={CARD_BODY}>\n        <span className={props.address.geo.lat > 0 ? alive : dead}>\n            {props.address.geo.lat}\n        </span>\n        <span className={props.address.geo.lng > 0 ? alive : dead}>\n            {props.address.geo.lng}\n        </span>\n    </div>;\n\nconst MonsterName = (props: any) =>\n    <div className={CARD_BODY}>\n        <p className=\"text-gray-700 text-base\">{props.name}</p>\n    </div>;\n\nconst MonsterImage = (props: any) =>\n    <div className={CARD_BODY}>\n        <img className=\"w-full\"\n             src={`https://robohash.org/${props.id}?set=set2&size=180x180`}\n             alt=\"Sunset in the mountains\"/>\n    </div>;\n\nconst Monster = (props: IMonster) =>\n    <div className={CELL}>\n        <button\n            className={CARD}\n            style={{height: '24rem'}}>\n            <MonsterImage id={props.id}/>\n            <MonsterName name={props.name}/>\n            <MonsterStatus address={props.address}/>\n        </button>\n    </div>;\n\nexport const MonsterWrapper = (props: IMonsterWrapper) =>\n    <div className=\"flex flex-wrap m-4 content-center\">\n        {props.monsters\n            .map((monster, i) =>\n                <Monster\n                    key={`monster-${monster.name}-${i}`}\n                    id={monster.id}\n                    address={monster.address}\n                    name={monster.name}/>)}\n    </div>;\n\n","import React from \"react\";\nimport {SEARCH_INPUT} from \"../../config/StyleConstants\";\n\ninterface ISearchBox {\n    placeholder: string;\n    handleChange: any;\n}\n\nexport const SearchBox = (props: ISearchBox) =>\n    <input\n        className={SEARCH_INPUT}\n        type=\"search\"\n        placeholder={props.placeholder}\n        onChange={props.handleChange}/>;","import React, {Component} from 'react';\nimport {IMonster} from \"./monsters/monster.model\"\nimport {MonsterWrapper} from \"./monsters/monster.components\";\nimport {SearchBox} from \"../functions/search-box.component\";\n\ninterface IUsersProps {\n}\n\ninterface IUsersState {\n    monsters: IMonster[],\n    searchField: string\n}\n\nclass MonsterContainer extends Component<IUsersProps, IUsersState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {monsters: [], searchField: ''}\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}))\n    }\n\n    render() {\n        const {monsters, searchField} = this.state;\n        const filteredMonsters = monsters\n            .filter(monster =>\n                monster.name.toLowerCase().includes(searchField.toLowerCase()));\n        return (\n            <div className=\"container\">\n                <SearchBox\n                    placeholder={\"find a monster\"}\n                    handleChange={(event: { target: { value: any; }; }) =>\n                        this.setState({searchField: event.target.value})}/>\n                <MonsterWrapper\n                    monsters={filteredMonsters}/>\n            </div>);\n    }\n}\n\nexport default MonsterContainer;","import React from \"react\";\nimport {HEADER_CONTAINER, HEADER_TEXT} from \"../style/StyleConstants\";\n\ninterface IHeader {\n    title: string;\n}\nconst Header = (props: IHeader) =>\n            <header className={HEADER_CONTAINER}>\n                <h1 className={HEADER_TEXT}>\n                    {props.title}\n                </h1>\n            </header>;\n\n\nexport default Header;","/* LAYOUT */\nexport const APP_CONTAINER = \"m-auto antialiased font-sans font-serif font-mono text-center\";\nexport const HEADER_CONTAINER = \"bg-blue-500 w-full flex flex-col sticky top-0 pt-12\";\nexport const HEADER_TEXT=\"text-center text-orange-500 font-bold\";\n\n/* INPUT */\nexport const BODY_CONTENT =\"bg-orange-500 min-h-screen flex flex-col items-center justify-center text-white text-2xl\";\nexport const SEARCH_INPUT = \"text-gray-500 rounded m-4 py-4 px-6 hover:shadow hover:bg-blue-600\";\n\n/* CARD LAYOUT */\nexport const CARD = \"max-w-sm rounded overflow-hidden shadow-lg bg-white hover:opacity-50\";\nexport const CELL = \"w-1/5 py-1 m-2\";\nexport const CARD_BODY = \"px-6 py-4\";\n\n/* LIST ELEMENT */\nexport const ORANGE_LIST = \"hover:text-orange-500 text-gray-500\";\nexport const BLUE_LIST = \"hover:text-blue-500 text-gray-500\";\nexport const DARK_GREEN_LIST = \"hover:text-green-900 text-gray-500\";\nexport const LIGHT_GREEN_LIST = \"hover:text-green-300 text-gray-500\";","import React from \"react\";\n\ninterface IColumnSection {\n    children: any;\n    name: string;\n    nameClass: string;\n}\n\nexport const ColumnSection = (props: IColumnSection) =>\n    <div className=\"w-1/4 h-auto\">\n        <div className={props.nameClass}>\n            {props.name}\n        </div>\n        <ul className=\"list-reset leading-normal\">\n            {props.children}\n        </ul>\n    </div>;\n\ninterface IColumnElement {\n    children: any;\n    listClass: string;\n}\n\nexport const ColumnElement = (props: IColumnElement) =>\n    <li className={props.listClass}>\n        {props.children}\n    </li>;","import React from \"react\";\nimport {ColumnElement, ColumnSection} from \"../grid/grid.components\";\nimport {BLUE_LIST, DARK_GREEN_LIST, LIGHT_GREEN_LIST, ORANGE_LIST} from \"../../../../config/StyleConstants\";\n\ninterface IFooter {\n    title: string;\n}\n\nconst Footer = (props: IFooter) =>\n    <footer>\n        <div className=\"container p-6\">\n            <div className=\"flex mb-4\">\n                <ColumnSection\n                    name={\"Orange\"}\n                    nameClass={\"text-orange mb-2\"}>\n                    <ColumnElement\n                        listClass={ORANGE_LIST}>\n                        One\n                    </ColumnElement>\n                </ColumnSection>\n                <ColumnSection\n                    name={\"Blue\"}\n                    nameClass={\"text-blue mb-2\"}>\n                    <ColumnElement listClass={BLUE_LIST}>\n                        One\n                    </ColumnElement>\n                    <ColumnElement listClass={BLUE_LIST}>\n                        Two\n                    </ColumnElement>\n                    <ColumnElement listClass={BLUE_LIST}>\n                        Three\n                    </ColumnElement>\n                </ColumnSection>\n                <ColumnSection\n                    name={'Green-dark'}\n                    nameClass={\"text-green-dark mb-2\"}>\n                    <ColumnElement listClass={DARK_GREEN_LIST}>\n                        One\n                    </ColumnElement>\n                    <ColumnElement listClass={DARK_GREEN_LIST}>\n                        Two\n                    </ColumnElement>\n                    <ColumnElement listClass={DARK_GREEN_LIST}>\n                        Three\n                    </ColumnElement>\n                    <ColumnSection name={'Green-light'} nameClass={\"text-green-light mb-2 mt-4\"}>\n                        <ColumnElement listClass={LIGHT_GREEN_LIST}>\n                            One\n                        </ColumnElement>\n                        <ColumnElement listClass={LIGHT_GREEN_LIST}>\n                            Two\n                        </ColumnElement>\n                        <ColumnElement listClass={LIGHT_GREEN_LIST}>\n                            Three\n                        </ColumnElement>\n                    </ColumnSection>\n                </ColumnSection>\n                <ColumnSection\n                    name={\"Newsletter\"}\n                    nameClass={\"text-yellow-700 mb-2\"}>\n                    <p className=\"text-gray-500 leading-normal\">\n                        Lorem ipsum dolor sit amet, consectetur adipisicing\n                        elit.\n                        Commodi, consectetur.\n                    </p>\n                </ColumnSection>\n            </div>\n            {props.title}\n        </div>\n    </footer>;\n\n\nexport default Footer;","import React from \"react\";\nimport \"./App.css\";\nimport MonsterContainer from \"./components/entities/monster.container\";\nimport Header from \"./components/shared/layout/header/header\";\nimport Footer from \"./components/shared/layout/footer/footer\";\nimport {APP_CONTAINER, BODY_CONTENT} from \"./components/shared/layout/style/StyleConstants\";\n\nconst App: React.FC = () => {\n    return (\n        <div className={APP_CONTAINER}>\n           <Header title={'Monster Cards'}/>\n            <div className={BODY_CONTENT}>\n                <MonsterContainer/>\n            </div>\n            <Footer title={\"Here you can put your footer info\"}/>\n        </div>\n    )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}